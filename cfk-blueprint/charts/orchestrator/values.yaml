## Confluent Orchestrator
##
name: confluent-orchestrator
###
## Image pull secret
imagePullSecretRef:  confluent-registry
## Confluent Orchestrator Image Information
##
image:
  registry: docker.io
  repository: confluentinc/cpc-operator
  pullPolicy: IfNotPresent
  tag: "0.300.2"

## Enables leader election if more than one replica
replicas: 1

## Webhooks Configuration
## webhooks requires TLS certificates to set up webhook server,
## which used for secure communication between webhook server and kubernetes api server.
## Please provide the TLS keys and certificates with format as mentioned in this doc:
## https://docs.confluent.io/operator/current/co-network-encryption.html#provide-tls-keys-and-certificates-in-pem-format.
## The certificate must have the Subject Alternative Name (SAN) of the form: confluent-orchestrator.<namespace>.svc
webhooks:
  port: 8443
  tls:
    autoGeneratedCerts: true
    secretRef: ""

## Confluent Orchestrator Pod Resource
##
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi
## Pod termination grace-period
##
terminationGracePeriodSeconds: 30
## Enable debugging
##
debug: false

affinity: {}
##  Example for nodeAffinity, configure as required.
##affinity:
##  nodeAffinity:
##    requiredDuringSchedulingIgnoredDuringExecution:
##      nodeSelectorTerms:
##      - matchExpressions:
##        - key: "node-role.kubernetes.io/compute"
##          operator: In
##          values:
##          - "true"

##
## Configure tolerations
## https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
##
##tolerations:
##- key: "dedicated"
##  operator: "Equal"
##  value: "operator"
##  effect: "NoSchedule"

## Pod Security Context
##
podSecurity:
  enabled: true
  securityContext:
    fsGroup: 1001
    runAsUser: 1001
    runAsNonRoot: true

## Container Security Context
## Container security context overrides security context defined at pod level.
## For example following container security context would override the
## default PodSecurityContext defined above
##
## securityContext:
##   runAsUser: 2001
##   runAsNonRoot: false
##
## Refer to this documentation on how configure security context for container
## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-containerh
##
containerSecurity:
  enabled: false
  securityContext: {}

##
## ServiceAccount
## If enabled it will create, otherwise it will
## not create
##
serviceAccount:
  create: true
  name: ""
## Enable Kubernetes RBAC
## When set to true, it will create a proper role/rolebinding or cluster/clusterrolebinding based on namespaced field.
## If a user doesn't have permission to create role/rolebinding then they can disable rbac field and
## create required resources out of band to be used by the Confluent agent. In this case, follow the
## templates/clusterrole.yaml and templates/clusterrolebiding.yaml to create proper required resources.
rbac: true

##
## Pod annotations/labels configurations
##
pod:
  annotations:
    prometheus.io/scrape: "true"
  labels: {}
# labels:
#   key: "value"

